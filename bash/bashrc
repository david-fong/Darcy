
[[ "$MINGW64_HOME" ]] && MINGW64_HOME="$(cygpath "$MINGW64_HOME")"
[[ "$JAVA_HOME"    ]] &&    JAVA_HOME="$(cygpath "$JAVA_HOME")"
[[ "$GRADLE_HOME"  ]] &&  GRADLE_HOME="$(cygpath "$GRADLE_HOME")"

# exit if not running interactively:
[[ "$-" =~ "i" ]] || return

# commands to list things:
# declare -p    variables and function names
# set           like above, but show function bodies
# alias         aliases
# shopt         shell options
# hash          hashed executables from PATH
# bind -p       readline key-bindings
# enable        enabled shell builtins


# disable sending and receiving XON/XOFF
# (only one is actually necessary to do)
stty stop '' -ixoff
stty stop '' -ixon

# set codepage (on windows) to UTF-8
# https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers
# chcp.com 65001

shopt -s globstar
shopt -s extglob
shopt -s checkwinsize
export FUNCNEST=100


shopt -s histappend
declare -a histignore=(
    'fg' 'fg\ *' 'hist' 'history' 'hash' 'bind' 'clear'
    'config' 'inputrc' 'bashrc' 'als' 'alsl' 'vimrc' 'gitconfig' 'tigrc'
    'cd\ \.\.*' 'ls' 'lsa' 'clsa' 'lsen\ *'
    'vims' 'todo'
    './build' #'./main' 'npm\ run\ start'
    'tig' 'git\ status' 'git\ st' 'git\ br' 'git\ diff'
)
export HISTIGNORE=
for pattern in "${histignore[@]}"; do
    HISTIGNORE+="$pattern"':'
done
unset histignore
export HISTCONTROL=ignoredups:ignorespace
export HISTSIZE=1024
export HISTFILESIZE=2048


# https://wiki.archlinux.org/index.php/XDG_Base_Directory
declare -rx       INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
#declare -rx      LESSKEY="${XDG_CONFIG_HOME}/less/lesskey" <- this doesn't work :/
declare -rx           VIM="${XDG_CONFIG_HOME}"
declare -rx      VIMINIT='source ${VIM}/vimfiles/vimrc'
declare -rx    TIGRC_USER="${XDG_CONFIG_HOME}/git/tigrc_colorstrings"
declare -rx PYTHONSTARTUP="${XDG_CONFIG_HOME}/python/startup.py"
             PYTHONHOME+=":${XDG_CONFIG_HOME}/python/"

source "${XDG_CONFIG_HOME}/npm/completion"
PATH+=":$(cygpath "${APPDATA}")/npm"

[[ -f "${XDG_CONFIG_HOME}/ansicode/ansicode"   ]] && source "${XDG_CONFIG_HOME}/ansicode/ansicode"
[[ -f "${XDG_CONFIG_HOME}/bash/aliases"        ]] && source "${XDG_CONFIG_HOME}/bash/aliases"
[[ -f "${XDG_CONFIG_HOME}/bash/aliases__local" ]] && source "${XDG_CONFIG_HOME}/bash/aliases__local"
alias   inputrc='"$EDITOR" "${XDG_CONFIG_HOME}/readline/inputrc"'
alias    bashrc='"$EDITOR" "${XDG_CONFIG_HOME}/bash/bashrc"'
alias       als='"$EDITOR" "${XDG_CONFIG_HOME}/bash/aliases"'
alias      alsl='"$EDITOR" "${XDG_CONFIG_HOME}/bash/aliases__local"'
alias     vimrc='"$EDITOR" "${XDG_CONFIG_HOME}/vimfiles/vimrc"'
alias gitconfig='"$EDITOR" "${XDG_CONFIG_HOME}/git/config"'
alias     tigrc='"$EDITOR" "${XDG_CONFIG_HOME}/git/git_tigrc" -c "vsplit +set\ noma /etc/tigrc | 20 wincmd > | wincmd p"'

export EDITOR='vim'
export CSCOPE_EDITOR='view'
export NODE_ENV='development'


# startup the gpg and ssh agent:
# make the gpg-agent cache my password for one hour.
# https://help.github.com/en/github/authenticating-to-github/associating-an-email-with-your-gpg-key
export GPG_TTY=$(tty)
eval "(gpg-agent --daemon)"
[[ -z "${SSH_AUTH_SOCK}" ]] && eval "$(ssh-agent -s)"
function ssh-agent() {
    echo 'warning: an ssh agent has already been started.'
    echo 'if you wish to use this executable, prefix with the command builtin.'
    echo 'to kill all ssh-agents, do:'
    echo '  taskkill //F //FI "IMAGENAME eq ssh-agent.exe" //T'
}
readonly -f ssh-agent


# less command behaviour:
# +X : enable startup termcap
# -F : (not used) print to console if 1 page
# -q : medium-quiet
# -R : interpret escape-sequences
# -J : show status-column
# -N : show line numbers (off)
# -M : use long prompt
# -x4: use <4> as tabstop
declare -x LESS='-+X -qRJM -x4'

# https://github.com/mintty/mintty/issues/170#issuecomment-108889098
# disable mouse-scrolling in mintty for the alternate screen
echo -e '\e[?7786l'

# thicker underscore cursor on mintty:
echo -e '\e[?3c'

# grep colored output styling:
# https://askubuntu.com/a/1042242
# TODO declare -rx GREP_COLORS=''


# expand variables to their contained values,
# and don't suggest files for these commands:
shopt -s direxpand
complete -d -o bashdefault -- cd ls lsa mkdir
complete -ab -A function -X '{_*,}' -- type
complete -A shopt shopt
complete -A stopped fg
complete -A running bg
complete -A helptopic help
complete -A variable unset

# suggest completions for an empty
# commandline with enabled builtins:
complete -A enabled -E


# finalize prompt:
source "$(dirname "${BASH_SOURCE[0]}")""/prompt.sh"
declare -rxi PROMPT_DIRTRIM=5

