#!/bin/bash

# note to self: in a script, BASH_SOURCE is an array with
# entry 0 = full file path to script
# entry 1 = full file path to pwd of script caller





alias greeting='clear; \echo -e "\n$(heading "$(date)")""\n"'
alias cyclelogin='\exec "$0" "$@" --init-file ~/.bash_profile'

alias rm='\rm -I --verbose'
alias hd='xxd -e -g4 -c32'
alias jobs='jobs -l; tasklist | grep agent'
alias hist='history | less +G'
function hash() {
    command hash "$@" | sort -r
}

if [[ "$OCTAVE_HOME" ]]
then alias octave='"$OCTAVE_HOME"/mingw64/bin/octave-cli --interactive'; fi



declare -a grepargs=('--line-number' '--text' '--color=auto')
grepargs+=('--exclude-dir={.git,build,dist,compile,db,node_modules}')
if [[ ! -f "${XGD_CONFIG_HOME}/grep/excludefrom" ]]
then touch "${XGD_CONFIG_HOME}/grep/excludefrom"; fi
grepargs+=('--exclude-from="${XGD_CONFIG_HOME}/grep/excludefrom"' '--extended-regexp')
alias grep='\grep '"${grepargs[@]}"''
unset grepargs



alias search='grep -r --byte-offset --include="*.java"'
alias diff='\diff --side-by-side --suppress-common-lines --width="$COLUMNS" --color=auto'
function manifest() {
    local -ra choices="$(find -type f -name "*.jar")"
    [[ "${#choices}" -le 0 ]] && return 1
    select jarchoice in ${choices[@]}; do
        [[ "$jarchoice" ]] && unzip -qc "$jarchoice" META-INF/MANIFEST.MF
    done
}





alias gti='git'
alias cim='vim' # typing is hard.
alias vims='vim -S'
alias swp='find "$@" -type f -name "*.swp"'





function todo() {
    local -r todopath="${HOME}/.todo.md"
    if [[ "$1" = '-e' ]]
    then
        echo; heading "TODO"
        tput rmam
        cat "$todopath"
        heading
        tput smam
    else
        "$EDITOR" "$todopath" -c 'vnew +set\ noma | wincmd p'
    fi
}
alias todoe='todo -e'





alias ls='\ls -CX --color=auto --group-directories-first'
function __lsa() {
    ls "$@" -o --almost-all --human-readable
}
function lsa() {
    local -r OLD_GREP_COLORS="$GREP_COLORS"
    export GREP_COLORS='ms=38;5;246' # grey
    local -x coloropt='--color=never'
    if [[ -t 1 ]]; then
        coloropt='--color=always'
    fi
    local -r listing="$(__lsa "$@" "$coloropt")"
        \grep -E "^[^-]" <<< "$listing"
        \grep -E "^[-]"  <<< "$listing" \
      | \grep -E "\\s[.]?[^. ]+$"
        \grep -E "^[-].*\\S+[.][^. ]+$"  <<< "$listing" \
      | \grep -E "$coloropt" "[.][^. ]+$"
    export GREP_COLORS="$OLD_GREP_COLORS"
    return 0
}
alias clsa='greeting; lsa'
function lsen() {
    for extension in "$@"; do
        echo
        __lsa | \grep -Ei "\\S*[.]${extension}$" --
    done
}





# BOOKMARKED DIRECTORIES & DIRECTORY NAVIGATION:
alias root='\cd / && clsa'
function home() {
    stty -echo
    \echo -e "\n$(heading "$(date)")""\n"
    \cd "${HOME}" && time ls --width=75 --hide=[nN][tT][uU][sS]*
    stty echo
}
alias config='\cd ${XGD_CONFIG_HOME} && clsa'
alias githome='\cd "$(git rev-parse --show-toplevel 2>/dev/null)" && clsa'
alias e='\cd .. && clsa'





alias paste='\cat /dev/clipboard'
alias soundcheck='\echo -ne "\a"'
function numdirents() {
    local -a dirents=(*)
    local -i num="${#dirents}"
    dirents=(.*)
    num+="${#dirents}"
    echo -n "$((num-2))"
}



function yes() {
    [[ ! -t 1 ]] && exec \yes
    local -a colors=(red yellow green cyan blue magenta)
    local -i i=0
    while [[ i -lt "${#colors[@]}" ]]; do
        colors["$i"]="$(ansicode sgr start "${colors[$i]}")"
        i+=1
    done; i=0; readonly colors
    local payload="$@"
    readonly payload="${payload:=y\n}"
    trap 'echo -ne "\e[0m"; trap - SIGINT; return 0' SIGINT
    while : #sleep '0.01'
    do
        echo -ne "${colors[$i]}""$payload"
        let i="($i+1)"%"${#colors[@]}"
    done
}



declare -rxa COIN_FLIP_STR=('tails' 'heads')
alias coinflip='echo "${COIN_FLIP_STR["$((RANDOM%2))"]}"'
alias coin='coinflip'
alias iamsad='echo -e "\e[34m\nthere, there.\n\nit will be alright.\e[0m\n"'

function bind() {
    if [[ -z "$*" ]]; then
        local -r filterout="(self-insert)|(do-lowercase-version)"
        bind -p | grep -vT --color=always "$filterout" | less
    else
        command bind "$@"
    fi
}





# $1: string for heading text
function heading() {
    local payload="$1"
    [ "$payload" ] && payload=' '"$payload"' '
    local line=''
    local -ri payloadlen="${#payload}"
    printf -v line '%*s' "$((COLUMNS-payloadlen-3))"
    line="${line// /=}"
    echo -ne '==='"$payload"
    printf '%s\n' "$line"
}





# make functions unmodifiable:
readonly -f manifest todo __lsa lsa lsen home numdirents yes heading
export   -f manifest todo __lsa lsa lsen home numdirents yes heading



