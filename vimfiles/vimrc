
set encoding=utf-8
scriptencoding utf-8

"autocmd BufRead,BufNewFile *.c,*.h set cindent
"retab

set smartindent
set tabstop=4
set softtabstop=4 "use &tabstop
set shiftwidth=0  "use &tabstop
set shiftround    "round when shifting
set expandtab

set formatoptions=croqlj
set vb t_vb=
set mouse=a
set incsearch
set clipboard=unnamed

set title
set splitright
set fillchars=vert:\ "
set wildmenu
set wildmode=list:longest,longest:full
set showcmd

if &diff
syntax off
endif


" try to start cursorline at top of screen ------
augroup VimrcGroup
    autocmd!
    autocmd BufRead,BufNewFile * call OnOpenFile()
augroup END
function! OnOpenFile()
    set hlsearch
    execute "normal zt"
    if &readonly
        set nomodifiable
    endif
endfunction


" smoother scrolling: ---------------------------
set scrolloff=5
set sidescroll=1
set sidescrolloff=7
map  <silent> <ScrollWheelUp>   <C-Y>
map  <silent> <ScrollWheelDown> <C-E>
imap <silent> <ScrollWheelUp>   <C-O><C-Y>
imap <silent> <ScrollWheelDown> <C-O><C-E>
map  <silent> <C-K> <C-Y>
map  <silent> <C-J> <C-E>
imap <silent> <C-K> <C-O><C-Y>
imap <silent> <C-J> <C-O><C-E>


" save using ctrl+s: ----------------------------
noremap  <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>gv
inoremap <silent> <C-S> <C-O>:update<CR>

" exit using ctrl+x: ----------------------------
noremap  <silent> <C-X> :q<CR>
vnoremap <silent> <C-X> :q<CR>
inoremap <silent> <C-X> <ESC>:q<CR>

" close all using ctrl+q: -----------------------
noremap  <silent> <C-Q> :qa<CR>
vnoremap <silent> <C-Q> :qa<CR>
inoremap <silent> <C-Q> <ESC>:qa<CR>

" pause in insert mode: -------------------------
inoremap <silent> <C-Z> <ESC><C-Z>


" normal things in insert mode: -----------------
    imap <silent> <ESC>h <LEFT>
    imap <silent> <ESC>j <DOWN>
    imap <silent> <ESC>k <UP>
    imap <silent> <ESC>l <RIGHT>
inoremap <silent> <ESC>b <C-O>b
inoremap <silent> <ESC>w <C-O>w
inoremap <silent> <ESC>p <C-O>p
inoremap <silent> <ESC>P <C-O>P

" control-backspace to delete word: -------------
    imap <silent> <C-BS> <C-W>

" readline-style bindings: ----------------------
cnoremap          <C-A>  <C-B>
inoremap <silent> <C-A>  <C-O>^
inoremap <silent> <C-E>  <C-O>$
inoremap <silent> <ESC>f <C-O>w
inoremap <silent> <C-D>  <DEL>

" vim-style udlr in command-mode: ---------------
cnoremap <ESC>h <LEFT>
cnoremap <ESC>j <DOWN>
cnoremap <ESC>k <UP>
cnoremap <ESC>l <RIGHT>


" line numbers: ---------------------------------
set foldcolumn=1
set numberwidth=1
set number
set cursorline "'show' the cursor line
hi FoldColumn       ctermbg=none
hi CursorLine                       cterm=none
hi CursorLineNr     ctermfg=white   cterm=bold
hi LineNr           ctermfg=blue


" text wrapping: --------------------------------
if exists('+linebreak')
    set nowrap
    augroup WrappingOptionsGroup
        autocmd!
        autocmd FileType markdown,text call SetWrappingOptions()
    augroup END
    function! SetWrappingOptions()
        setlocal wrap
        noremap <silent><buffer> <UP>   g<UP>
        noremap <silent><buffer> <DOWN> g<DOWN>
       inoremap <silent><buffer> <UP>   <C-O>g<UP>
       inoremap <silent><buffer> <DOWN> <C-O>g<DOWN>
        noremap <silent><buffer> k      gk
        noremap <silent><buffer> j      gj
    endfunction
    set linebreak
    set showbreak=>\ "↪↳\ 
    if exists('+breakindent')
        set breakindent
        set breakindentopt=shift:2
    endif
endif


" whitespace indicators: ------------------------
set list
if has("patch-7.4.710")
    set listchars=tab:▸\ ,trail:·,extends:»,precedes:«
else
    set listchars=tab:\|\ ,trail:-
endif
"hi SpecialKey ctermfg=grey
set list


" statusline ------------------------------------
set statusline=\ [%f]%h%m%r%y[%{&ff}]
set statusline+=%=%l,%c%V\ %P\ "
set laststatus=2
hi StatusLineNC ctermfg=grey ctermbg=darkgrey


" check for external changes (from u/weisenzahm on reddit)
" check for file modifications automatically (current buffer only).
" use :NoAutoChecktime to disable it (uses b:autochecktime)
function! MyAutoCheckTime()
    " only check timestamp for normal files
    if &buftype != '' | return | endif
    if ! exists('b:autochecktime') || b:autochecktime
        checktime %
        let b:autochecktime = 1
    endif
endfunction
augroup MyAutoChecktime
  au!
  au FocusGained,BufEnter,CursorHold,CursorHoldI * call MyAutoCheckTime()
augroup END
command! NoAutoChecktime let b:autochecktime=0


" spelling is hard: -----------------------------
iabbrev teh the
inoremap {<CR> {<CR>}<ESC>O
function! FixMyLowerCaseSentances()
    sil! %s/\([.]\s\+\)\([a-z]\)/\1\u\2/g
endfunction


" for hex editing: ------------------------------
augroup Binary
    au!
    au BufReadPre  *.bin let &bin=1
    au BufReadPost *.bin if &bin | %!xxd
    au BufReadPost *.bin set ft=xxd | endif
    au BufWritePre *.bin if &bin | %!xxd -r
    au BufWritePre *.bin endif
    au BufWritePost *.bin if &bin | %!xxd
    au BufWritePost *.bin set nomod | endif
augroup END


" systemverilog module signal param list --------
"   search back for <module_name>"(",
"   then search forward for semicolon.
" substitute flags:
" - no error message
" - replace all occurances in each line
" - 
function! VerilogParamFormat()
    sil! +?^[^.]*(? ,    s/(/(/e          " insert newline after '('
    sil! +?^[^.]*(? ;/;/ s/);$/);/eg      " put ');' on new line
    sil!  ?^[^.]*(? ;/;/ s/,\s*/,\1/eg    " put all signals on single lines
    sil!  ?^[^.]*(? ;/;/ g/^\s*$/d          " delete empty lines
    sil!  ?^[^.]*(?+;/;/-s/^\s*/    /eg     " use four leading spaces
    sil!  ?^[^.]*(? ;/;/ s/input\s*/input  /eg  " use four leading spaces
endfunction

